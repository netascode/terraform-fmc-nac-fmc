###
# FTD MANUAL NAT RULE
###
locals {
  res_ftdmanualnatrules = flatten([
    for domain in local.domains : [
      for natpolicy in try(domain.ftd_nat_policies, []) : [
        for ftdmanualnatrule in try(natpolicy.ftd_manual_nat_rules, []) : {
          key        = replace("$${natpolicy.name}_$${ftdmanualnatrule.name}", " ", "")
          nat_policy = natpolicy.name
          idx        = index(natpolicy.ftd_manual_nat_rules, ftdmanualnatrule)
          data       = ftdmanualnatrule
        }
      ]
    ]
  ])
}

%{~ for index in range(0, number_of_rules) ~}
resource "fmc_ftd_manualnat_rules" "manualnat_rules_${index}" {
  for_each = { for rule in local.res_ftdmanualnatrules : rule.key => rule if rule.idx == ${index} }

  # Mandatory
  nat_policy = local.map_natpolicies[each.value.nat_policy].id
  nat_type   = each.value.data.nat_type

    dynamic "original_source" {
      for_each = can(each.value.data.original_source) ? ["1"] : []
      content {
        id = local.map_networkobjects[each.value.data.original_source].id
        type = local.map_networkobjects[each.value.data.original_source].type
      }
    }

  # Optional
  description                       = try(each.value.data.description, null) 
  enabled                           = try(each.value.data.enabled, local.defaults.fmc.domains.ftd_nat_policies.ftd_manual_nat_rules.enabled, null) 
  fallthrough                       = try(each.value.data.fall_through, local.defaults.fmc.domains.ftd_nat_policies.ftd_manual_nat_rules.fallthrough, null) 
  interface_in_original_destination = try(each.value.data.interface_in_original_destination, local.defaults.fmc.domains.ftd_nat_policies.ftd_manual_nat_rules.interface_in_original_destination, null) 
  interface_in_translated_source    = try(each.value.data.interface_in_translated_source, local.defaults.fmc.domains.ftd_nat_policies.ftd_manual_nat_rules.interface_in_translated_source, null) 
  ipv6                              = try(each.value.data.ipv6, local.defaults.fmc.domains.ftd_nat_policies.ftd_manual_nat_rules.ipv6, null)
  net_to_net                        = try(each.value.data.net_to_net, local.defaults.fmc.domains.ftd_nat_policies.ftd_manual_nat_rules.net_to_net, null) 
  no_proxy_arp                      = try(each.value.data.no_proxy_arp, local.defaults.fmc.domains.ftd_nat_policies.ftd_manual_nat_rules.no_proxy_arp, null)
  perform_route_lookup              = try(each.value.data.perform_route_lookup, local.defaults.fmc.domains.ftd_nat_policies.ftd_manual_nat_rules.perform_route_lookup, null) 
  section                           = try(each.value.data.section, null)
  translate_dns                     = try(each.value.data.translate_dns, local.defaults.fmc.domains.ftd_nat_policies.ftd_manual_nat_rules.translate_dns, null) 
  unidirectional                    = try(each.value.data.unidirectional, local.defaults.fmc.domains.ftd_nat_policies.ftd_manual_nat_rules.unidirectional, null) 

  %{~ if index != 0 ~}
  # Positioning
  depends_on = [
    %{ for i in range(0, index)}
      fmc_ftd_manualnat_rules.manualnat_rules_${i},
    %{~ endfor ~}
      fmc_ftd_nat_policies.ftdnatpolicy
  ]
  lifecycle {
    create_before_destroy = false
    #replace_triggered_by = [    
    %{ for i in range(0, index)}
    #    fmc_ftd_manualnat_rules.manualnat_rules_${i},
    %{~ endfor ~}
    #]      
  }
  %{~ else ~}
  depends_on = [fmc_ftd_nat_policies.ftdnatpolicy]
  lifecycle {
    create_before_destroy = false
  }  
  %{~ endif ~}

  dynamic "destination_interface" {
    for_each = try(length(each.value.data.destination_interface), 0) != 0 ? ["1"] : []
    content {
      id    = local.map_securityzones[each.value.data.destination_interface].id
      type  = local.map_securityzones[each.value.data.destination_interface].type
    }
  }

  dynamic "original_destination" {
    for_each = try(length(each.value.data.original_destination), 0) != 0 ? ["1"] : []
    content {
      id    = local.map_networkobjects[each.value.data.original_destination].id
      type  = local.map_networkobjects[each.value.data.original_destination].type
      }
    }

  dynamic "original_destination_port" {
    for_each = try(length(each.value.data.original_destination_port), 0) != 0 ? ["1"] : []
    content {
      id    = local.map_ports[each.value.data.original_destination_port].id
      type  = local.map_ports[each.value.data.original_destination_port].type
    }
  }

  dynamic "original_source_port" {
    for_each = try(length(each.value.data.original_source_port), 0) != 0 ? ["1"] : []
    content {
      id    = local.map_ports[each.value.data.original_source_port].id
      type  = local.map_ports[each.value.data.original_source_port].type
    }
  }

  dynamic "source_interface" {
    for_each = try(length(each.value.data.source_interface), 0) != 0 ? ["1"] : []
    content {
      id    = local.map_securityzones[each.value.data.source_interface].id
      type  = local.map_securityzones[each.value.data.source_interface].type
    }
  }

  dynamic "translated_destination" {
    for_each = try(length(each.value.data.translated_destination), 0) != 0 ? ["1"] : []
    content {
      id    = local.map_networkobjects[each.value.data.translated_destination].id
      type  = local.map_networkobjects[each.value.data.translated_destination].type
    }
  }

  dynamic "translated_destination_port" {
    for_each = try(length(each.value.data.translated_destination_port), 0) != 0 ? ["1"] : []
    content {
      id    = local.map_ports[each.value.data.translated_destination_port].id
      type  = local.map_ports[each.value.data.translated_destination_port].type
    }
  }

  dynamic "translated_source" {
    for_each = try(length(each.value.data.translated_source), 0) != 0 ? ["1"] : []
    content {
      id    = local.map_networkobjects[each.value.data.translated_source].id
      type  = local.map_networkobjects[each.value.data.translated_source].type
    }
  }

  dynamic "translated_source_port" {
    for_each = try(length(each.value.data.translated_source_port), 0) != 0 ? ["1"] : []
    content {
      id    = local.map_ports[each.value.data.translated_source_port].id
      type  = local.map_ports[each.value.data.translated_source_port].type
    }
  }
}

%{~ endfor ~}
