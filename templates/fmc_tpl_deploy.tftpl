resource "fmc_ftd_deploy" "ftd" {
  for_each = { for deploymemt in local.res_deploy : deploymemt.device => deploymemt }

  # Mandatory  
  device = local.map_devices[each.value.device].id

  # Optional      
  ignore_warning  = each.value.deploy_ignore_warning
  force_deploy    = each.value.deploy_force

  depends_on = [
    fmc_access_policies.accesspolicy,
    fmc_device_physical_interfaces.physical_interface,
    fmc_device_subinterfaces.sub_interfaces,
    fmc_devices.device,
    fmc_device_cluster.cluster,
    fmc_dynamic_objects.dynamicobject,
    fmc_fqdn_objects.fqdn,
    fmc_ftd_autonat_rules.ftdautonatrule,
    fmc_ftd_nat_policies.ftdnatpolicy,
    fmc_host_objects.host,
    fmc_icmpv4_objects.icmpv4,
    fmc_ips_policies.ips_policy,
    fmc_network_objects.network,
    fmc_policy_devices_assignments.policy_assignment,
    fmc_port_objects.port,
    fmc_prefilter_policy.prefilterpolicy,
    fmc_range_objects.range,
    fmc_security_zone.securityzone,
    fmc_staticIPv4_route.ipv4staticroute,
    fmc_url_objects.url,
    %{~ for rule in accessrules ~}
    fmc_access_rules.${rule.key},
    %{~ endfor ~}
    %{~ for rule in ftdmanualnatrules ~}
    fmc_ftd_manualnat_rules.${rule.key},
    %{~ endfor ~}
    %{~ for grp in networkgroups ~}
    fmc_network_group_objects.${grp.name},
    %{~ endfor ~}
    ]
}