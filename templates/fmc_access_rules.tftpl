###
# ACCESS RULE
###
locals {
  res_accessrules = flatten([
    for domain in local.domains : [
      for accesspolicy in try(domain.policies.access_policies, {}) : [
        for accessrule in try(accesspolicy.access_rules, {}) : {
          key  = replace("$${accesspolicy.name}_$${accessrule.name}", " ", "")
          acp  = accesspolicy.name
          idx  = index(accesspolicy.access_rules, accessrule)
          data = accessrule
        }
      ]
    ]
  ])
}

%{~ for index in range(0, number_of_rules) ~}
resource "fmc_access_rules" "access_rule_${index}" {
  for_each = { for rule in local.res_accessrules : rule.key => rule if rule.idx == ${index} }

  # Mandatory
  acp       = local.map_accesspolicies[each.value.acp].id
  name      = each.value.data.name
  action    = each.value.data.action
  enabled   = try(each.value.data.enabled, local.defaults.fmc.domains.policies.access_policies.access_rules.enabled)

  # Optional
  category            = try(each.value.data.category, null) 
  enable_syslog       = try(each.value.data.enable_syslog, local.defaults.fmc.domains.policies.access_policies.access_rules.enable_syslog, null) 
  file_policy         = try(each.value.data.file_policy, null)
  ips_policy          = try(local.map_ipspolicies[each.value.data.ips_policy].id, null)
  log_begin           = try(each.value.data.log_connection_begin, null)
  log_end             = try(each.value.data.log_connection_end, null)
  log_files           = try(each.value.data.log_files, null)
  #new_comments        = try(each.value.data.new_comments, null)
  section             = try(each.value.data.section, null)
  send_events_to_fmc  = try(each.value.data.send_events_to_fmc, null)
  syslog_config       = try(each.value.data.syslog_config, null)
  syslog_severity     = try(each.value.data.syslog_severity, null)

  %{~ if index != 0 ~}
  # Positioning
  depends_on = [
    %{ for i in range(0, index)}
      fmc_access_rules.access_rule_${i},
    %{~ endfor ~}
      fmc_access_policies_category.accesspolicy_category
    ]
  lifecycle {
    create_before_destroy = false
    #replace_triggered_by = [
    %{ for i in range(0, index)}
    #    fmc_access_rules.access_rule_${i},
    %{~ endfor ~}
    #]  
  }  
  %{~ else ~}
  depends_on = [fmc_access_policies_category.accesspolicy_category]
  lifecycle {
    create_before_destroy = false
  }
  %{~ endif ~}


  dynamic "destination_dynamic_objects" {
    for_each = try(length(each.value.data.destination_dynamic_objects), 0) != 0 ? ["1"] : []
    content {       
      dynamic "destination_dynamic_object" {
        for_each = { for obj in try(each.value.data.destination_dynamic_objects, []) : obj => obj } 
        content {
          id = local.map_dynamicobjects[destination_dynamic_object.value].id
          type = local.map_dynamicobjects[destination_dynamic_object.value].type
        } 
      }
    }
  }

  dynamic "destination_networks" {
    for_each = try(length(each.value.data.destination_network_objects), 0) != 0 ? ["1"] : []
    content {      
      dynamic "destination_network" {
        for_each = { for obj in try(each.value.data.destination_network_objects, []) : obj => obj }
        content {
          id = local.map_networkobjects[destination_network.value].id
          type = local.map_networkobjects[destination_network.value].type
        }
      }
    }
  }

  dynamic "destination_ports" {
    for_each = try(length(each.value.data.destination_port_objects), 0) != 0 ? ["1"] : []
    content {   
    dynamic "destination_port" {
        for_each = { for obj in try(each.value.data.destination_port_objects, []) : obj => obj }
        content {
          id = local.map_ports[destination_port.value].id
          type = local.map_ports[destination_port.value].type
        } 
      }
    }
  }

  dynamic "destination_security_group_tags" {
    for_each = try(length(each.value.data.destination_sgts), 0) != 0 ? ["1"] : []
    content {       
    dynamic "destination_security_group_tag" {
        for_each = { for obj in try(each.value.data.destination_sgts, []) : obj => obj }

        content {
          id = local.map_sgts[destination_security_group_tag.value].id
          type = local.map_sgts[destination_security_group_tag.value].type
        } 
      }
    }
  }
 
   dynamic "destination_zones" { 
    for_each = try(length(each.value.data.destination_zones), 0) != 0 ? ["1"] : []
    content {        
      dynamic "destination_zone" {
        for_each = { for zone in try(each.value.data.destination_zones, []) : zone => zone }
        content {
          id = local.map_securityzones[destination_zone.value].id
          type = local.map_securityzones[destination_zone.value].type
        }
      }
    }
   }

  dynamic "source_dynamic_objects" {
    for_each = try(length(each.value.data.source_dynamic_objects), 0) != 0 ? ["1"] : []
    content {          
      dynamic "source_dynamic_object" {
        for_each = { for obj in try(each.value.data.source_dynamic_objects, []) : obj => obj }
        content {
          id = local.map_dynamicobjects[source_dynamic_object.value].id
          type = local.map_dynamicobjects[source_dynamic_object.value].type
        } 
      }
    }
  }

  dynamic "source_networks" {
    for_each = try(length(each.value.data.source_network_objects), 0) != 0 ? ["1"] : []
    content {      
    dynamic "source_network" {
      for_each = { for obj in try(each.value.data.source_network_objects, []) : obj => obj }
      content {
        id = local.map_networkobjects[source_network.value].id
        type = local.map_networkobjects[source_network.value].type
      }
    }
  }
  }

  dynamic "source_ports" {
    for_each = try(length(each.value.data.source_port_objects), 0) != 0 ? ["1"] : []
    content {    
    dynamic "source_port" {
      for_each = { for obj in try(each.value.data.source_port_objects, []) : obj => obj }
      content {
        id = local.map_ports[source_port.value].id
        type = local.map_ports[source_port.value].type
      } 
    }
  }
  }
  
  dynamic "source_security_group_tags" {
    for_each = try(length(each.value.data.source_sgts), 0) != 0 ? ["1"] : []
    content {
      dynamic "source_security_group_tag" {
        for_each = { for obj in try(each.value.data.source_sgts, []) : obj => obj }
        content {
          id = local.map_sgts[source_security_group_tag.value].id
          type = local.map_sgts[source_security_group_tag.value].type
        } 
      }
    }
  }

  dynamic "source_zones" {
    for_each = try(length(each.value.data.source_zones), 0) != 0 ? ["1"] : []
    content {
      dynamic "source_zone" {
        for_each = { for obj in try(each.value.data.source_zones, []) : obj => obj }
        content {
          id = local.map_securityzones[source_zone.value].id
          type = local.map_securityzones[source_zone.value].type
        }
      }
    }
  }

  dynamic "urls" {
    for_each = try(length(each.value.data.urls), 0) != 0 ? ["1"] : []
    content {
      dynamic "url" {
        for_each = { for obj in try(each.value.data.urls, []) : obj => obj }
        content {
          id = try(local.map_urls[url.value].id, local.map_urlgroups[url.value].id)
          type = try(local.map_urls[url.value].type, local.map_urlgroups[url.value].type)
        } 
      }
    }
  }

}

%{ endfor ~}
